package apps.team;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import util.statemachine.MachineState;
import util.statemachine.Move;

public class MachineStateCache {
    private Map<MachineState, ArrayList<Move>> legalMovesByState;
    private Map<StateMove, MachineState> successorState;
    
    // A machinestate, together with a move legal in that state
    private class StateMove
    {
	public StateMove(MachineState state, Move move)
	{
	    this.state = state;
	    this.move = move;
	}
	
	MachineState state;
	Move move;
	
	// autogenerated
	@Override
	public int hashCode() {
	    final int prime = 31;
	    int result = 1;
	    result = prime * result + getOuterType().hashCode();
	    result = prime * result + ((move == null) ? 0 : move.hashCode());
	    result = prime * result + ((state == null) ? 0 : state.hashCode());
	    return result;
	}
	@Override
	public boolean equals(Object obj) {
	    if (this == obj)
		return true;
	    if (obj == null)
		return false;
	    if (getClass() != obj.getClass())
		return false;
	    StateMove other = (StateMove) obj;
	    if (!getOuterType().equals(other.getOuterType()))
		return false;
	    if (move == null) {
		if (other.move != null)
		    return false;
	    } else if (!move.equals(other.move))
		return false;
	    if (state == null) {
		if (other.state != null)
		    return false;
	    } else if (!state.equals(other.state))
		return false;
	    return true;
	}
	private MachineStateCache getOuterType() {
	    return MachineStateCache.this;
	}
    }
    
    public MachineStateCache()
    {
	this.legalMovesByState = new HashMap<MachineState, ArrayList<Move>>();
	this.successorState = new HashMap<StateMove, MachineState>();
    }
    
    
}
